==13683== Memcheck, a memory error detector
==13683== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==13683== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==13683== Command: ./parsing -m bronze -o ouput.json stdin.xml
==13683== Parent PID: 1796
==13683== 
==13683== Warning: set address range perms: large range [0xc073040, 0x3a29453f) (undefined)
==13683== Warning: set address range perms: large range [0xc073040, 0x3a294040) (defined)
==13683== Use of uninitialised value of size 8
==13683==    at 0x483EFA6: __strlen_sse2 (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==13683==    by 0x10A276: getQuerySpeciesName (blastInfo.c:68)
==13683==    by 0x10A3A6: displayQuerySpecies (blastInfo.c:102)
==13683==    by 0x10B2A3: blastOutPut_iteration (retrieveInfo.c:41)
==13683==    by 0x1095F1: main (parsing.c:36)
==13683== 
==13683== Use of uninitialised value of size 8
==13683==    at 0x483EFB4: __strlen_sse2 (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==13683==    by 0x10A276: getQuerySpeciesName (blastInfo.c:68)
==13683==    by 0x10A3A6: displayQuerySpecies (blastInfo.c:102)
==13683==    by 0x10B2A3: blastOutPut_iteration (retrieveInfo.c:41)
==13683==    by 0x1095F1: main (parsing.c:36)
==13683== 
==13683== Use of uninitialised value of size 8
==13683==    at 0x10A29E: getQuerySpeciesName (blastInfo.c:72)
==13683==    by 0x10A3A6: displayQuerySpecies (blastInfo.c:102)
==13683==    by 0x10B2A3: blastOutPut_iteration (retrieveInfo.c:41)
==13683==    by 0x1095F1: main (parsing.c:36)
==13683== 
==13683== Use of uninitialised value of size 8
==13683==    at 0x10A2D2: getQuerySpeciesName (blastInfo.c:76)
==13683==    by 0x10A3A6: displayQuerySpecies (blastInfo.c:102)
==13683==    by 0x10B2A3: blastOutPut_iteration (retrieveInfo.c:41)
==13683==    by 0x1095F1: main (parsing.c:36)
==13683== 
==13683== Use of uninitialised value of size 8
==13683==    at 0x10A2B5: getQuerySpeciesName (blastInfo.c:72)
==13683==    by 0x10A3A6: displayQuerySpecies (blastInfo.c:102)
==13683==    by 0x10B2A3: blastOutPut_iteration (retrieveInfo.c:41)
==13683==    by 0x1095F1: main (parsing.c:36)
==13683== 
==13683== Use of uninitialised value of size 8
==13683==    at 0x10A2E9: getQuerySpeciesName (blastInfo.c:76)
==13683==    by 0x10A3A6: displayQuerySpecies (blastInfo.c:102)
==13683==    by 0x10B2A3: blastOutPut_iteration (retrieveInfo.c:41)
==13683==    by 0x1095F1: main (parsing.c:36)
==13683== 
==13683== Use of uninitialised value of size 8
==13683==    at 0x10A341: getQuerySpeciesName (blastInfo.c:89)
==13683==    by 0x10A3A6: displayQuerySpecies (blastInfo.c:102)
==13683==    by 0x10B2A3: blastOutPut_iteration (retrieveInfo.c:41)
==13683==    by 0x1095F1: main (parsing.c:36)
==13683== 
==13683== Warning: set address range perms: large range [0x59c9d040, 0x87ebe53f) (undefined)
==13683== Warning: set address range perms: large range [0x87ebf040, 0xb60e053f) (undefined)
==13683== Invalid write of size 1
==13683==    at 0x4A7F218: __vfscanf_internal (vfscanf-internal.c:2901)
==13683==    by 0x4A7B381: __isoc99_sscanf (isoc99_sscanf.c:31)
==13683==    by 0x10B96F: node_HSP (retrieveInfo.c:215)
==13683==    by 0x746361626F746562: ???
==13683==    by 0x7375646E69207264: ???
==13683==    by 0x41202C7375697273: ???
==13683==    by 0x746361626F746562: ???
==13683==    by 0x6E616C656D207264: ???
==13683==    by 0x76206D756E65676E: ???
==13683==    by 0x746C616D202E7260: ???
==13683==    by 0x6168636361732D6E: ???
==13683==    by 0x736E61726F766F71: ???
==13683==  Address 0x1fff001000 is not stack'd, malloc'd or (recently) free'd
==13683== 
==13683== 
==13683== Process terminating with default action of signal 11 (SIGSEGV)
==13683==  Access not within mapped region at address 0x1FFF001000
==13683==    at 0x4A7F218: __vfscanf_internal (vfscanf-internal.c:2901)
==13683==    by 0x4A7B381: __isoc99_sscanf (isoc99_sscanf.c:31)
==13683==    by 0x10B96F: node_HSP (retrieveInfo.c:215)
==13683==    by 0x746361626F746562: ???
==13683==    by 0x7375646E69207264: ???
==13683==    by 0x41202C7375697273: ???
==13683==    by 0x746361626F746562: ???
==13683==    by 0x6E616C656D207264: ???
==13683==    by 0x76206D756E65676E: ???
==13683==    by 0x746C616D202E7260: ???
==13683==    by 0x6168636361732D6E: ???
==13683==    by 0x736E61726F766F71: ???
==13683==  If you believe this happened as a result of a stack
==13683==  overflow in your program's main thread (unlikely but
==13683==  possible), you can try to increase the size of the
==13683==  main thread stack using the --main-stacksize= flag.
==13683==  The main thread stack size used in this run was 8388608.
==13683== 
==13683== HEAP SUMMARY:
==13683==     in use at exit: 2,374,727,785 bytes in 419,477 blocks
==13683==   total heap usage: 424,738 allocs, 5,261 frees, 2,375,790,587 bytes allocated
==13683== 
==13683== LEAK SUMMARY:
==13683==    definitely lost: 1,001 bytes in 8 blocks
==13683==    indirectly lost: 0 bytes in 0 blocks
==13683==      possibly lost: 1,547,971,070 bytes in 2 blocks
==13683==    still reachable: 826,755,714 bytes in 419,467 blocks
==13683==         suppressed: 0 bytes in 0 blocks
==13683== Rerun with --leak-check=full to see details of leaked memory
==13683== 
==13683== Use --track-origins=yes to see where uninitialised values come from
==13683== For lists of detected and suppressed errors, rerun with: -s
==13683== ERROR SUMMARY: 412 errors from 8 contexts (suppressed: 0 from 0)
