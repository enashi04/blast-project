==1394== Memcheck, a memory error detector
==1394== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==1394== Using Valgrind-3.16.1 and LibVEX; rerun with -h for copyright info
==1394== Command: ./parsing -m bronze -o output4.json stdin.xml
==1394== Parent PID: 167
==1394== 
==1394== Invalid read of size 1
==1394==    at 0x4B5D7D0: __strcpy_avx2 (strcpy-avx2.S:60)
==1394==    by 0x10AB6A: HSP_Enter (retrieveInfo.c:235)
==1394==    by 0x10A566: hit_Iteration (retrieveInfo.c:100)
==1394==    by 0x10A457: blastOutPut_iteration (retrieveInfo.c:67)
==1394==    by 0x1093F5: main (parsing.c:33)
==1394==  Address 0x1ffefff200 is on thread 1's stack
==1394==  1560 bytes below stack pointer
==1394== 
==1394== Invalid read of size 1
==1394==    at 0x483BDEA: strcpy (vg_replace_strmem.c:511)
==1394==    by 0x10AB6A: HSP_Enter (retrieveInfo.c:235)
==1394==    by 0x10A566: hit_Iteration (retrieveInfo.c:100)
==1394==    by 0x10A457: blastOutPut_iteration (retrieveInfo.c:67)
==1394==    by 0x1093F5: main (parsing.c:33)
==1394==  Address 0x1ffefff201 is on thread 1's stack
==1394==  1559 bytes below stack pointer
==1394== 
==1394== 
==1394== Process terminating with default action of signal 11 (SIGSEGV)
==1394==  Access not within mapped region at address 0x0
==1394==    at 0x4B5D7D0: __strcpy_avx2 (strcpy-avx2.S:60)
==1394==    by 0x10AB6A: HSP_Enter (retrieveInfo.c:235)
==1394==    by 0x10A566: hit_Iteration (retrieveInfo.c:100)
==1394==    by 0x10A457: blastOutPut_iteration (retrieveInfo.c:67)
==1394==    by 0x1093F5: main (parsing.c:33)
==1394==  If you believe this happened as a result of a stack
==1394==  overflow in your program's main thread (unlikely but
==1394==  possible), you can try to increase the size of the
==1394==  main thread stack using the --main-stacksize= flag.
==1394==  The main thread stack size used in this run was 8388608.
==1394== 
==1394== HEAP SUMMARY:
==1394==     in use at exit: 2,432,642,937 bytes in 419,609 blocks
==1394==   total heap usage: 425,254 allocs, 5,645 frees, 2,433,716,000 bytes allocated
==1394== 
==1394== LEAK SUMMARY:
==1394==    definitely lost: 11,485 bytes in 132 blocks
==1394==    indirectly lost: 0 bytes in 0 blocks
==1394==      possibly lost: 2,276,389,434 bytes in 22 blocks
==1394==    still reachable: 156,242,018 bytes in 419,455 blocks
==1394==         suppressed: 0 bytes in 0 blocks
==1394== Rerun with --leak-check=full to see details of leaked memory
==1394== 
==1394== For lists of detected and suppressed errors, rerun with: -s
==1394== ERROR SUMMARY: 141 errors from 2 contexts (suppressed: 0 from 0)
