==7704== Memcheck, a memory error detector
==7704== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==7704== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==7704== Command: ./parsing -m bronze -o output1.json doubleBlast.xml
==7704== Parent PID: 1911
==7704== 
==7704== Warning: set address range perms: large range [0xb873040, 0x39a9453f) (undefined)
==7704== Warning: set address range perms: large range [0xb873040, 0x39a94040) (defined)
==7704== Warning: set address range perms: large range [0x59c9d040, 0x87ebe53f) (undefined)
==7704== Invalid read of size 8
==7704==    at 0x10BB3C: node_HSP (retrieveInfo.c:225)
==7704==    by 0x10B700: node_Iteration (retrieveInfo.c:108)
==7704==    by 0x10B5D8: blastOutPut_iteration (retrieveInfo.c:70)
==7704==    by 0x1096B1: main (parsing.c:38)
==7704==  Address 0x96c72648 is 0 bytes after a block of size 40 alloc'd
==7704==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==7704==    by 0x10B6B9: node_Iteration (retrieveInfo.c:101)
==7704==    by 0x10B5D8: blastOutPut_iteration (retrieveInfo.c:70)
==7704==    by 0x1096B1: main (parsing.c:38)
==7704== 
==7704== Invalid read of size 1
==7704==    at 0x483FED4: strcmp (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==7704==    by 0x10BB4D: node_HSP (retrieveInfo.c:225)
==7704==    by 0x10B700: node_Iteration (retrieveInfo.c:108)
==7704==    by 0x10B5D8: blastOutPut_iteration (retrieveInfo.c:70)
==7704==    by 0x1096B1: main (parsing.c:38)
==7704==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==7704== 
==7704== 
==7704== Process terminating with default action of signal 11 (SIGSEGV)
==7704==  Access not within mapped region at address 0x0
==7704==    at 0x483FED4: strcmp (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==7704==    by 0x10BB4D: node_HSP (retrieveInfo.c:225)
==7704==    by 0x10B700: node_Iteration (retrieveInfo.c:108)
==7704==    by 0x10B5D8: blastOutPut_iteration (retrieveInfo.c:70)
==7704==    by 0x1096B1: main (parsing.c:38)
==7704==  If you believe this happened as a result of a stack
==7704==  overflow in your program's main thread (unlikely but
==7704==  possible), you can try to increase the size of the
==7704==  main thread stack using the --main-stacksize= flag.
==7704==  The main thread stack size used in this run was 8388608.
==7704== 
==7704== HEAP SUMMARY:
==7704==     in use at exit: 1,816,077,391 bytes in 7,705,391 blocks
==7704==   total heap usage: 7,708,301 allocs, 2,910 frees, 1,816,561,700 bytes allocated
==7704== 
==7704== LEAK SUMMARY:
==7704==    definitely lost: 1,019 bytes in 16 blocks
==7704==    indirectly lost: 0 bytes in 0 blocks
==7704==      possibly lost: 773,985,535 bytes in 1 blocks
==7704==    still reachable: 1,042,090,837 bytes in 7,705,374 blocks
==7704==         suppressed: 0 bytes in 0 blocks
==7704== Rerun with --leak-check=full to see details of leaked memory
==7704== 
==7704== For lists of detected and suppressed errors, rerun with: -s
==7704== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
